/*! For license information please see node_modules_monaco-editor_esm_vs_basic-languages_hcl_hcl_js.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunktext_processor=self.webpackChunktext_processor||[]).push([["node_modules_monaco-editor_esm_vs_basic-languages_hcl_hcl_js"],{"./node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '.hcl',\n  keywords: ['var', 'local', 'path', 'for_each', 'any', 'string', 'number', 'bool', 'true', 'false', 'null', 'if ', 'else ', 'endif ', 'for ', 'in', 'endfor'],\n  operators: ['=', '>=', '<=', '==', '!=', '+', '-', '*', '/', '%', '&&', '||', '!', '<', '>', '?', '...', ':'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n  tokenizer: {\n    root: [// highlight main blocks\n    [/^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, ['type', '', 'string', '', 'string', '', '@brackets']], // highlight all the remaining blocks\n    [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, ['identifier', '', 'string', '', 'string', '', '@brackets']], // highlight block\n    [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/, ['identifier', '', 'string', '', 'operator', '', '@brackets']], // terraform general highlight - shared with expressions\n    {\n      include: '@terraform'\n    }],\n    terraform: [// highlight terraform functions\n    [/@terraformFunctions(\\()/, ['type', '@brackets']], // all other words are variables or keywords\n    [/[a-zA-Z_]\\w*-*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'variable'\n      }\n    }], {\n      include: '@whitespace'\n    }, {\n      include: '@heredoc'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\d[\\d']*/, 'number'], [/\\d/, 'number'], [/[;,.]/, 'delimiter'], // strings\n    [/\"/, 'string', '@string'], [/'/, 'invalid']],\n    heredoc: [[/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, {\n      token: 'string.heredoc.delimiter',\n      next: '@heredocBody.$1'\n    }]],\n    heredocBody: [[/([\\w\\-]+)$/, {\n      cases: {\n        '$1==$S2': [{\n          token: 'string.heredoc.delimiter',\n          next: '@popall'\n        }],\n        '@default': 'string.heredoc'\n      }\n    }], [/./, 'string.heredoc']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment'], [/#.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    string: [[/\\$\\{/, {\n      token: 'delimiter',\n      next: '@stringExpression'\n    }], [/[^\\\\\"\\$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@popall']],\n    stringInsideExpression: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    stringExpression: [[/\\}/, {\n      token: 'delimiter',\n      next: '@pop'\n    }], [/\"/, 'string', '@stringInsideExpression'], {\n      include: '@terraform'\n    }]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js?")}}]);