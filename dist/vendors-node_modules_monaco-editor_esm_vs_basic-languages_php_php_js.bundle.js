"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_php_php_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/php/php.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/php/php.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}',\n    notIn: ['string']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*(#|//)region\\\\b'),\n      end: new RegExp('^\\\\s*(#|//)endregion\\\\b')\n    }\n  }\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '',\n  // ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.root'\n    }], [/<!DOCTYPE/, 'metatag.html', '@doctype'], [/<!--/, 'comment.html', '@comment'], [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']], [/(<)(script)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@style'\n    }]], [/(<)([:\\w]+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/(<\\/)(\\w+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/</, 'delimiter.html'], [/[^<]+/] // text\n    ],\n    doctype: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.comment'\n    }], [/[^>]+/, 'metatag.content.html'], [/>/, 'metatag.html', '@pop']],\n    comment: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.comment'\n    }], [/-->/, 'comment.html', '@pop'], [/[^-]+/, 'comment.content.html'], [/./, 'comment.content.html']],\n    otherTag: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.otherTag'\n    }], [/\\/?>/, 'delimiter.html', '@pop'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/] // whitespace\n    ],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.script'\n    }], [/type/, 'attribute.name', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptAfterType'\n    }], [/=/, 'delimiter', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInEmbeddedState.scriptEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.style'\n    }], [/type/, 'attribute.name', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleAfterType'\n    }], [/=/, 'delimiter', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInEmbeddedState.styleEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <style> tags handling\n    phpInSimpleState: [[/<\\?((php)|=)?/, 'metatag.php'], [/\\?>/, {\n      token: 'metatag.php',\n      switchTo: '@$S2.$S3'\n    }], {\n      include: 'phpRoot'\n    }],\n    phpInEmbeddedState: [[/<\\?((php)|=)?/, 'metatag.php'], [/\\?>/, {\n      token: 'metatag.php',\n      switchTo: '@$S2.$S3',\n      nextEmbedded: '$S3'\n    }], {\n      include: 'phpRoot'\n    }],\n    phpRoot: [[/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@phpKeywords': {\n          token: 'keyword.php'\n        },\n        '@phpCompileTimeConstants': {\n          token: 'constant.php'\n        },\n        '@default': 'identifier.php'\n      }\n    }], [/[$a-zA-Z_]\\w*/, {\n      cases: {\n        '@phpPreDefinedVariables': {\n          token: 'variable.predefined.php'\n        },\n        '@default': 'variable.php'\n      }\n    }], // brackets\n    [/[{}]/, 'delimiter.bracket.php'], [/[\\[\\]]/, 'delimiter.array.php'], [/[()]/, 'delimiter.parenthesis.php'], // whitespace\n    [/[ \\t\\r\\n]+/], // comments\n    [/(#|\\/\\/)$/, 'comment.php'], [/(#|\\/\\/)/, 'comment.php', '@phpLineComment'], // block comments\n    [/\\/\\*/, 'comment.php', '@phpComment'], // strings\n    [/\"/, 'string.php', '@phpDoubleQuoteString'], [/'/, 'string.php', '@phpSingleQuoteString'], // delimiters\n    [/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,\\@]/, 'delimiter.php'], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.php'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.php'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.php'], [/0[0-7']*[0-7]/, 'number.octal.php'], [/0[bB][0-1']*[0-1]/, 'number.binary.php'], [/\\d[\\d']*/, 'number.php'], [/\\d/, 'number.php']],\n    phpComment: [[/\\*\\//, 'comment.php', '@pop'], [/[^*]+/, 'comment.php'], [/./, 'comment.php']],\n    phpLineComment: [[/\\?>/, {\n      token: '@rematch',\n      next: '@pop'\n    }], [/.$/, 'comment.php', '@pop'], [/[^?]+$/, 'comment.php', '@pop'], [/[^?]+/, 'comment.php'], [/./, 'comment.php']],\n    phpDoubleQuoteString: [[/[^\\\\\"]+/, 'string.php'], [/@escapes/, 'string.escape.php'], [/\\\\./, 'string.escape.invalid.php'], [/\"/, 'string.php', '@pop']],\n    phpSingleQuoteString: [[/[^\\\\']+/, 'string.php'], [/@escapes/, 'string.escape.php'], [/\\\\./, 'string.escape.invalid.php'], [/'/, 'string.php', '@pop']]\n  },\n  phpKeywords: ['abstract', 'and', 'array', 'as', 'break', 'callable', 'case', 'catch', 'cfunction', 'class', 'clone', 'const', 'continue', 'declare', 'default', 'do', 'else', 'elseif', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', 'endwhile', 'extends', 'false', 'final', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'implements', 'interface', 'instanceof', 'insteadof', 'namespace', 'new', 'null', 'object', 'old_function', 'or', 'private', 'protected', 'public', 'resource', 'static', 'switch', 'throw', 'trait', 'try', 'true', 'use', 'var', 'while', 'xor', 'die', 'echo', 'empty', 'exit', 'eval', 'include', 'include_once', 'isset', 'list', 'require', 'require_once', 'return', 'print', 'unset', 'yield', '__construct'],\n  phpCompileTimeConstants: ['__CLASS__', '__DIR__', '__FILE__', '__LINE__', '__NAMESPACE__', '__METHOD__', '__FUNCTION__', '__TRAIT__'],\n  phpPreDefinedVariables: ['$GLOBALS', '$_SERVER', '$_GET', '$_POST', '$_FILES', '$_REQUEST', '$_SESSION', '$_ENV', '$_COOKIE', '$php_errormsg', '$HTTP_RAW_POST_DATA', '$http_response_header', '$argc', '$argv'],\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/\n}; // TESTED WITH\n// <style type=\"text/css\" >\n//   .boo { background: blue;\n//   <?=''?>\n//   }\n//   .boo { background: blue;  <?=''?>  }\n// </style>\n// <!--\n// <?= '' ?>\n// -->\n// <?php\n// // The next line contains a syntax error:\n// __construct\n// if () {\n// \treturn \"The parser recovers from this type of syntax error\";\n// }\n// ?>\n// <html>\n// <head>\n// \t<title <?=''?>>Example page</title>\n//   <style <?=''?>>\n//     .boo { background: blue; <?=''?> }\n//   </style>\n// </head>\n// <body>\n// <script <?=''?> type<?=''?>=<?=''?>\"text/javascript\"<?=''?>>\n// \t// Some PHP embedded inside JS\n// \t// Generated <?=date('l, F jS, Y')?>\n// \tvar server_token = <?=rand(5, 10000)?>\n// \tif (typeof server_token === 'number') {\n// \t\talert('token: ' + server_token);\n// \t}\n// </script>\n// <div>\n// Hello\n// <? if (isset($user)) { ?>\n// \t<b><?=$user?></b>\n// <? } else { ?>\n// \t<i>guest</i>\n// <? } ?>\n// !\n// </div>\n// <?php\n// \t/* Example PHP file\n// \tmultiline comment\n// \t*/\n//  # Another single line comment\n// \t$cards = array(\"ah\", \"ac\", \"ad\", \"as\",\n// \t\t\"2h\", \"2c\", \"2d\", \"2s\",\n// \t\t\"3h\", \"3c\", \"3d\", \"3s\",\n// \t\t\"4h\", \"4c\", \"4d\", \"4s\",\n// \t\t\"5h\", \"5c\", \"5d\", \"5s\",\n// \t\t\"6h\", \"6c\", \"6d\", \"6s\",\n// \t\t\"7h\", \"7c\", \"7d\", \"7s\",\n// \t\t\"8h\", \"8c\", \"8d\", \"8s\",\n// \t\t\"9h\", \"9c\", \"9d\", \"9s\",\n// \t\t\"th\", \"tc\", \"td\", \"ts\",\n// \t\t\"jh\", \"jc\", \"jd\", \"js\",\n// \t\t\"qh\", \"qc\", \"qd\", \"qs\",\n// \t\t\"kh\", \"kc\", \"kd\", \"ks\");\n// \tsrand(time());\n// \tfor($i = 0; $i < 52; $i++) {\n// \t\t$count = count($cards);\n// \t\t$random = (rand()%$count);\n// \t\tif($cards[$random] == \"\") {\n// \t\t\t$i--;\n// \t\t} else {\n// \t\t\t$deck[] = $cards[$random];\n// \t\t\t$cards[$random] = \"\";\n// \t\t}\n// \t}\n// $_GET\n// __CLASS__\n// \tsrand(time());\n// \t$starting_point = (rand()%51);\n// \tprint(\"Starting point for cut cards is: $starting_point<p>\");\n// \t// display shuffled cards (EXAMPLE ONLY)\n// \tfor ($index = 0; $index < 52; $index++) {\n// \t\tif ($starting_point == 52) { $starting_point = 0; }\n// \t\tprint(\"Uncut Point: <strong>$deck[$index]</strong> \");\n// \t\tprint(\"Starting Point: <strong>$deck[$starting_point]</strong><br>\");\n// \t\t$starting_point++;\n// \t}\n// ?>\n// </body>\n// </html>\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/php/php.js?");

/***/ })

}]);