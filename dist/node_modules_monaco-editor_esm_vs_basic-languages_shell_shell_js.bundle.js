"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_shell_shell_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/shell/shell.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/shell/shell.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }]\n};\nvar language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.shell',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: ['if', 'then', 'do', 'else', 'elif', 'while', 'until', 'for', 'in', 'esac', 'fi', 'fin', 'fil', 'done', 'exit', 'set', 'unset', 'export', 'function'],\n  builtins: ['ab', 'awk', 'bash', 'beep', 'cat', 'cc', 'cd', 'chown', 'chmod', 'chroot', 'clear', 'cp', 'curl', 'cut', 'diff', 'echo', 'find', 'gawk', 'gcc', 'get', 'git', 'grep', 'hg', 'kill', 'killall', 'ln', 'ls', 'make', 'mkdir', 'openssl', 'mv', 'nc', 'node', 'npm', 'ping', 'ps', 'restart', 'rm', 'rmdir', 'sed', 'service', 'sh', 'shopt', 'shred', 'source', 'sort', 'sleep', 'ssh', 'start', 'stop', 'su', 'sudo', 'svn', 'tee', 'telnet', 'top', 'touch', 'vi', 'vim', 'wall', 'wc', 'wget', 'who', 'write', 'yes', 'zsh'],\n  // we include these common regular expressions\n  symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, [/[a-zA-Z]\\w*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@builtins': 'type.identifier',\n        '@default': ''\n      }\n    }], {\n      include: '@strings'\n    }, {\n      include: '@parameters'\n    }, {\n      include: '@heredoc'\n    }, [/[{}\\[\\]()]/, '@brackets'], [/-+\\w+/, 'attribute.name'], [/@symbols/, 'delimiter'], {\n      include: '@numbers'\n    }, [/[,;]/, 'delimiter']],\n    whitespace: [[/\\s+/, 'white'], [/(^#!.*$)/, 'metatag'], [/(^#.*$)/, 'comment']],\n    numbers: [[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+/, 'number']],\n    // Recognize strings, including those broken across lines\n    strings: [[/'/, 'string', '@stringBody'], [/\"/, 'string', '@dblStringBody']],\n    stringBody: [[/'/, 'string', '@popall'], [/./, 'string']],\n    dblStringBody: [[/\"/, 'string', '@popall'], [/./, 'string']],\n    heredoc: [[/(<<[-<]?)(\\s*)(['\"`]?)([\\w\\-]+)(['\"`]?)/, ['constants', 'white', 'string.heredoc.delimiter', 'string.heredoc', 'string.heredoc.delimiter']]],\n    parameters: [[/\\$\\d+/, 'variable.predefined'], [/\\$\\w+/, 'variable'], [/\\$[*@#?\\-$!0_]/, 'variable'], [/\\$'/, 'variable', '@parameterBodyQuote'], [/\\$\"/, 'variable', '@parameterBodyDoubleQuote'], [/\\$\\(/, 'variable', '@parameterBodyParen'], [/\\$\\{/, 'variable', '@parameterBodyCurlyBrace']],\n    parameterBodyQuote: [[/[^#:%*@\\-!_']+/, 'variable'], [/[#:%*@\\-!_]/, 'delimiter'], [/[']/, 'variable', '@pop']],\n    parameterBodyDoubleQuote: [[/[^#:%*@\\-!_\"]+/, 'variable'], [/[#:%*@\\-!_]/, 'delimiter'], [/[\"]/, 'variable', '@pop']],\n    parameterBodyParen: [[/[^#:%*@\\-!_)]+/, 'variable'], [/[#:%*@\\-!_]/, 'delimiter'], [/[)]/, 'variable', '@pop']],\n    parameterBodyCurlyBrace: [[/[^#:%*@\\-!_}]+/, 'variable'], [/[#:%*@\\-!_]/, 'delimiter'], [/[}]/, 'variable', '@pop']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/shell/shell.js?");

/***/ })

}]);