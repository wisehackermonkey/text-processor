"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_sb_sb_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  comments: {\n    lineComment: \"'\"\n  },\n  brackets: [['(', ')'], ['[', ']'], ['If', 'EndIf'], ['While', 'EndWhile'], ['For', 'EndFor'], ['Sub', 'EndSub']],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }]\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '.sb',\n  ignoreCase: true,\n  brackets: [{\n    token: 'delimiter.array',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, // Special bracket statement pairs\n  {\n    token: 'keyword.tag-if',\n    open: 'If',\n    close: 'EndIf'\n  }, {\n    token: 'keyword.tag-while',\n    open: 'While',\n    close: 'EndWhile'\n  }, {\n    token: 'keyword.tag-for',\n    open: 'For',\n    close: 'EndFor'\n  }, {\n    token: 'keyword.tag-sub',\n    open: 'Sub',\n    close: 'EndSub'\n  }],\n  keywords: ['Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile', 'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'],\n  tagwords: ['If', 'Sub', 'While', 'For'],\n  operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n  // we include these common regular expressions\n  identifier: /[a-zA-Z_][\\w]*/,\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// whitespace\n    {\n      include: '@whitespace'\n    }, // classes\n    [/(@identifier)(?=[.])/, 'type'], // identifiers, tagwords, and keywords\n    [/@identifier/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@operators': 'operator',\n        '@default': 'variable.name'\n      }\n    }], // methods, properties, and events\n    [/([.])(@identifier)/, {\n      cases: {\n        $2: ['delimiter', 'type.member'],\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+/, 'number.float'], [/\\d+/, 'number'], // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': 'delimiter'\n      }\n    }], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/(\\').*$/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"C?/, 'string', '@pop']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js?");

/***/ })

}]);