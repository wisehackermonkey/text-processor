"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_pascal_pascal_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['{', '}']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\n      end: new RegExp('^\\\\s*\\\\{\\\\$ENDREGION\\\\}')\n    }\n  }\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '.pascal',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm', 'attribute', 'begin', 'bindable', 'case', 'class', 'const', 'contains', 'default', 'div', 'else', 'end', 'except', 'exports', 'external', 'far', 'file', 'finalization', 'finally', 'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in', 'index', 'inherited', 'initialization', 'interrupt', 'is', 'label', 'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of', 'on', 'only', 'operator', 'or_else', 'otherwise', 'override', 'package', 'packed', 'pow', 'private', 'program', 'protected', 'public', 'published', 'interface', 'implementation', 'qualified', 'read', 'record', 'resident', 'requires', 'resourcestring', 'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored', 'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var', 'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with', 'write', 'xor', 'true', 'false', 'procedure', 'function', 'constructor', 'destructor', 'property', 'break', 'continue', 'exit', 'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'],\n  typeKeywords: ['boolean', 'double', 'byte', 'integer', 'shortint', 'char', 'longint', 'float', 'string'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or', '+', '-', '*', '/', '@', '&', '^', '%'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n    comment: [[/[^\\*\\}]+/, 'comment'], //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\}/, 'comment', '@pop'], [/[\\{]/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\{/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js?");

/***/ })

}]);