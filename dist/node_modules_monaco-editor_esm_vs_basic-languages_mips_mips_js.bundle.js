"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_mips_mips_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/mips/mips.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/mips/mips.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: ['###', '###'],\n    lineComment: '#'\n  },\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*#region\\\\b'),\n      end: new RegExp('^\\\\s*#endregion\\\\b')\n    }\n  }\n};\nvar language = {\n  defaultToken: '',\n  ignoreCase: false,\n  tokenPostfix: '.mips',\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: ['.data', '.text', 'syscall', 'trap', 'add', 'addu', 'addi', 'addiu', 'and', 'andi', 'div', 'divu', 'mult', 'multu', 'nor', 'or', 'ori', 'sll', 'slv', 'sra', 'srav', 'srl', 'srlv', 'sub', 'subu', 'xor', 'xori', 'lhi', 'lho', 'lhi', 'llo', 'slt', 'slti', 'sltu', 'sltiu', 'beq', 'bgtz', 'blez', 'bne', 'j', 'jal', 'jalr', 'jr', 'lb', 'lbu', 'lh', 'lhu', 'lw', 'li', 'la', 'sb', 'sh', 'sw', 'mfhi', 'mflo', 'mthi', 'mtlo', 'move'],\n  // we include these common regular expressions\n  symbols: /[\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/\\$[a-zA-Z_]\\w*/, 'variable.predefined'], [/[.a-zA-Z_]\\w*/, {\n      cases: {\n        this: 'variable.predefined',\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': ''\n      }\n    }], // whitespace\n    [/[ \\t\\r\\n]+/, ''], // Comments\n    [/#.*$/, 'comment'], // regular expressions\n    ['///', {\n      token: 'regexp',\n      next: '@hereregexp'\n    }], [/^(\\s*)(@regEx)/, ['', 'regexp']], [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], // delimiters\n    [/@symbols/, 'delimiter'], // numbers\n    [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/0[0-7]+(?!\\d)/, 'number.octal'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[,.]/, 'delimiter'], // strings:\n    [/\"\"\"/, 'string', '@herestring.\"\"\"'], [/'''/, 'string', \"@herestring.'''\"], [/\"/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: \"@string.'\"\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: 'string',\n          next: 'root.interpolatedstring'\n        },\n        '@default': 'string'\n      }\n    }], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/#/, 'string']],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        '$1==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/[^#\\\\'\"]+/, 'string'], [/['\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      token: 'string.quote',\n      next: 'root.interpolatedstring'\n    }], [/#/, 'string']],\n    comment: [[/[^#]+/, 'comment'], [/#/, 'comment']],\n    hereregexp: [[/[^\\\\\\/#]+/, 'regexp'], [/\\\\./, 'regexp'], [/#.*$/, 'comment'], ['///[igm]*', {\n      token: 'regexp',\n      next: '@pop'\n    }], [/\\//, 'regexp']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/mips/mips.js?");

/***/ })

}]);