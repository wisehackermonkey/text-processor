"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_cameligo_cameligo_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"\\\"\",\n    close: \"\\\"\"\n  }, {\n    open: \"(*\",\n    close: \"*)\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"\\\"\",\n    close: \"\\\"\"\n  }, {\n    open: \"(*\",\n    close: \"*)\"\n  }]\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '.cameligo',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['abs', 'assert', 'block', 'Bytes', 'case', 'Crypto', 'Current', 'else', 'failwith', 'false', 'for', 'fun', 'if', 'in', 'let', 'let%entry', 'let%init', 'List', 'list', 'Map', 'map', 'match', 'match%nat', 'mod', 'not', 'operation', 'Operation', 'of', 'record', 'Set', 'set', 'sender', 'skip', 'source', 'String', 'then', 'to', 'true', 'type', 'with'],\n  typeKeywords: ['int', 'unit', 'string', 'tz', 'nat', 'bool'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or', '+', '-', '*', '/', '@', '&', '^', '%', '->', '<-', '&&', '||'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n\n    /* */\n    comment: [[/[^\\(\\*]+/, 'comment'], //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\*\\)/, 'comment', '@pop'], [/\\(\\*/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js?");

/***/ })

}]);