"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktext_processor"] = self["webpackChunktext_processor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_html_html_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/html/html.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/html/html.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/* harmony import */ var _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../fillers/monaco-editor-core.js */ \"./node_modules/monaco-editor/esm/vs/basic-languages/fillers/monaco-editor-core.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['<!--', '-->'], ['<', '>'], ['{', '}'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\n    action: {\n      indentAction: _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__.languages.IndentAction.IndentOutdent\n    }\n  }, {\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    action: {\n      indentAction: _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__.languages.IndentAction.Indent\n    }\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*<!--\\\\s*#region\\\\b.*-->'),\n      end: new RegExp('^\\\\s*<!--\\\\s*#endregion\\\\b.*-->')\n    }\n  }\n};\nvar language = {\n  defaultToken: '',\n  tokenPostfix: '.html',\n  ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/<!DOCTYPE/, 'metatag', '@doctype'], [/<!--/, 'comment', '@comment'], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter', 'tag', '', 'delimiter']], [/(<)(script)/, ['delimiter', {\n      token: 'tag',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter', {\n      token: 'tag',\n      next: '@style'\n    }]], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', {\n      token: 'tag',\n      next: '@otherTag'\n    }]], [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', {\n      token: 'tag',\n      next: '@otherTag'\n    }]], [/</, 'delimiter'], [/[^<]+/] // text\n    ],\n    doctype: [[/[^>]+/, 'metatag.content'], [/>/, 'metatag', '@pop']],\n    comment: [[/-->/, 'comment', '@pop'], [/[^-]+/, 'comment.content'], [/./, 'comment.content']],\n    otherTag: [[/\\/?>/, 'delimiter', '@pop'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/] // whitespace\n    ],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/type/, 'attribute.name', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter', 'tag', {\n      token: 'delimiter',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/=/, 'delimiter', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/type/, 'attribute.name', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter', 'tag', {\n      token: 'delimiter',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/=/, 'delimiter', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']] // -- END <style> tags handling\n\n  }\n}; // TESTED WITH:\n// <!DOCTYPE html>\n// <html>\n// <head>\n//   <title>Monarch Workbench</title>\n//   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n//   <!----\n//   -- -- -- a comment -- -- --\n//   ---->\n//   <style bah=\"bah\">\n//     body { font-family: Consolas; } /* nice */\n//   </style>\n// </head\n// >\n// a = \"asd\"\n// <body>\n//   <br/>\n//   <div\n//   class\n//   =\n//   \"test\"\n//   >\n//     <script>\n//       function() {\n//         alert(\"hi </ script>\"); // javascript\n//       };\n//     </script>\n//     <script\n// \tbah=\"asdfg\"\n// \ttype=\"text/css\"\n// \t>\n//   .bar { text-decoration: underline; }\n//     </script>\n//   </div>\n// </body>\n// </html>\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/html/html.js?");

/***/ })

}]);