/*! For license information please see node_modules_monaco-editor_esm_vs_basic-languages_dart_dart_js.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunktext_processor=self.webpackChunktext_processor||[]).push([["node_modules_monaco-editor_esm_vs_basic-languages_dart_dart_js"],{"./node_modules/monaco-editor/esm/vs/basic-languages/dart/dart.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: '/**',\n    close: ' */',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    markers: {\n      start: /^\\s*\\s*#?region\\b/,\n      end: /^\\s*\\s*#?endregion\\b/\n    }\n  }\n};\nvar language = {\n  defaultToken: 'invalid',\n  tokenPostfix: '.dart',\n  keywords: ['abstract', 'dynamic', 'implements', 'show', 'as', 'else', 'import', 'static', 'assert', 'enum', 'in', 'super', 'async', 'export', 'interface', 'switch', 'await', 'extends', 'is', 'sync', 'break', 'external', 'library', 'this', 'case', 'factory', 'mixin', 'throw', 'catch', 'false', 'new', 'true', 'class', 'final', 'null', 'try', 'const', 'finally', 'on', 'typedef', 'continue', 'for', 'operator', 'var', 'covariant', 'Function', 'part', 'void', 'default', 'get', 'rethrow', 'while', 'deferred', 'hide', 'return', 'with', 'do', 'if', 'set', 'yield'],\n  typeKeywords: ['int', 'double', 'String', 'bool'],\n  operators: ['+', '-', '*', '/', '~/', '%', '++', '--', '==', '!=', '>', '<', '>=', '<=', '=', '-=', '/=', '%=', '>>=', '^=', '+=', '*=', '~/=', '<<=', '&=', '!=', '||', '&&', '&', '|', '^', '~', '<<', '>>', '!', '>>>', '??', '?', ':', '|='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@typeKeywords': 'type.identifier',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[A-Z_$][\\w\\$]*/, 'type.identifier'], // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    }, // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }], // @ annotations.\n    [/@[a-zA-Z]+/, 'annotation'], // variable\n    // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single'] //   [/[a-zA-Z]+/, \"variable\"]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/\\/.*$/, 'comment.doc'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([gimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"\\$]+/, 'string'], [/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop'], [/\\$\\w+/, 'identifier']],\n    string_single: [[/[^\\\\'\\$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop'], [/\\$\\w+/, 'identifier']]\n  }\n};\n\n//# sourceURL=webpack://text-processor/./node_modules/monaco-editor/esm/vs/basic-languages/dart/dart.js?")}}]);